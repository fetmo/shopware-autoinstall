<?php

namespace Shopware\Proxies\__CG__\Shopware\Models\Shop;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Template extends \Shopware\Models\Shop\Template implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'parent', 'shops', 'elements', 'layouts', 'configSets', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'id', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'template', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'name', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'description', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'author', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'license', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'esi', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'style', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'emotion', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'version', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'pluginId', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'plugin', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'parentId'];
        }

        return ['__isInitialized__', 'parent', 'shops', 'elements', 'layouts', 'configSets', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'id', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'template', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'name', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'description', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'author', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'license', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'esi', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'style', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'emotion', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'version', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'pluginId', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'plugin', '' . "\0" . 'Shopware\\Models\\Shop\\Template' . "\0" . 'parentId'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Template $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setAuthor($author)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuthor', [$author]);

        return parent::setAuthor($author);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthor', []);

        return parent::getAuthor();
    }

    /**
     * {@inheritDoc}
     */
    public function setTemplate($template)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTemplate', [$template]);

        return parent::setTemplate($template);
    }

    /**
     * {@inheritDoc}
     */
    public function getTemplate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTemplate', []);

        return parent::getTemplate();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setLicense($license)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLicense', [$license]);

        return parent::setLicense($license);
    }

    /**
     * {@inheritDoc}
     */
    public function getLicense()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLicense', []);

        return parent::getLicense();
    }

    /**
     * {@inheritDoc}
     */
    public function setEsi($esi)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEsi', [$esi]);

        return parent::setEsi($esi);
    }

    /**
     * {@inheritDoc}
     */
    public function getEsi()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEsi', []);

        return parent::getEsi();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmotion($emotion)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmotion', [$emotion]);

        return parent::setEmotion($emotion);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmotion($emotion)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmotion', [$emotion]);

        return parent::getEmotion($emotion);
    }

    /**
     * {@inheritDoc}
     */
    public function setStyle($style)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStyle', [$style]);

        return parent::setStyle($style);
    }

    /**
     * {@inheritDoc}
     */
    public function getStyle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStyle', []);

        return parent::getStyle();
    }

    /**
     * {@inheritDoc}
     */
    public function getVersion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVersion', []);

        return parent::getVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function setVersion($version)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVersion', [$version]);

        return parent::setVersion($version);
    }

    /**
     * {@inheritDoc}
     */
    public function getPlugin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlugin', []);

        return parent::getPlugin();
    }

    /**
     * {@inheritDoc}
     */
    public function setPlugin($plugin)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPlugin', [$plugin]);

        return parent::setPlugin($plugin);
    }

    /**
     * {@inheritDoc}
     */
    public function toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toString', []);

        return parent::toString();
    }

    /**
     * {@inheritDoc}
     */
    public function setParent(\Shopware\Models\Shop\Template $parent = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', [$parent]);

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', []);

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function setElements($elements)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setElements', [$elements]);

        return parent::setElements($elements);
    }

    /**
     * {@inheritDoc}
     */
    public function getElements()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getElements', []);

        return parent::getElements();
    }

    /**
     * {@inheritDoc}
     */
    public function setShops($shops)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShops', [$shops]);

        return parent::setShops($shops);
    }

    /**
     * {@inheritDoc}
     */
    public function getShops()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShops', []);

        return parent::getShops();
    }

    /**
     * {@inheritDoc}
     */
    public function setLayouts($layouts)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLayouts', [$layouts]);

        return parent::setLayouts($layouts);
    }

    /**
     * {@inheritDoc}
     */
    public function getLayouts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLayouts', []);

        return parent::getLayouts();
    }

    /**
     * {@inheritDoc}
     */
    public function getConfigSets()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConfigSets', []);

        return parent::getConfigSets();
    }

    /**
     * {@inheritDoc}
     */
    public function setConfigSets($configSets)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConfigSets', [$configSets]);

        return parent::setConfigSets($configSets);
    }

    /**
     * {@inheritDoc}
     */
    public function fromArray(array $array = array (
), array $fillable = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'fromArray', [$array, $fillable]);

        return parent::fromArray($array, $fillable);
    }

    /**
     * {@inheritDoc}
     */
    public function setOneToOne($data, $model, $property, $reference = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOneToOne', [$data, $model, $property, $reference]);

        return parent::setOneToOne($data, $model, $property, $reference);
    }

    /**
     * {@inheritDoc}
     */
    public function setOneToMany($data, $model, $property, $reference = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOneToMany', [$data, $model, $property, $reference]);

        return parent::setOneToMany($data, $model, $property, $reference);
    }

    /**
     * {@inheritDoc}
     */
    public function setManyToOne($data, $model, $property)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setManyToOne', [$data, $model, $property]);

        return parent::setManyToOne($data, $model, $property);
    }

}
